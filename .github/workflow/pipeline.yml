name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: stratocraftprod.azurecr.io
  IMAGE_NAME: stratocraft
  AZURE_RESOURCE_GROUP: rg-stratocraft-prod
  AZURE_CONTAINER_APP: ca-stratocraft-prod

jobs:
  # Code Quality and Testing
  test:
    name: Test and Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install templ
        run: go install github.com/a-h/templ/cmd/templ@latest

      - name: Generate templ files
        run: templ generate

      - name: Download dependencies
        run: go mod download

      - name: Run tests
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: Run go vet
        run: go vet ./...

      - name: Run staticcheck
        uses: dominikh/staticcheck-action@v1.3.0
        with:
          version: "2023.1.6"

      - name: Run gosec
        uses: securecodewarrior/github-action-gosec@master
        with:
          args: './...'

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Build and Push Docker Image
  build:
    name: Build and Push Image
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push'

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: sbom.spdx.json

  # Infrastructure Deployment
  infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    defaults:
      run:
        working-directory: ./infrastructure

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Terraform Format Check
        run: terraform fmt -check

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan -out=tfplan
        env:
          TF_VAR_environment: prod

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        env:
          TF_VAR_environment: prod

  # Application Deployment
  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: [build, infrastructure]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Container Apps
        uses: azure/container-apps-deploy-action@v1
        with:
          acrName: ${{ env.REGISTRY }}
          containerAppName: ${{ env.AZURE_CONTAINER_APP }}
          resourceGroup: ${{ env.AZURE_RESOURCE_GROUP }}
          imageToDeploy: ${{ needs.build.outputs.image-tag }}

      - name: Container App Health Check
        run: |
          echo "Waiting for deployment to complete..."
          sleep 30
          
          # Get the Container App FQDN
          FQDN=$(az containerapp show \
            --name ${{ env.AZURE_CONTAINER_APP }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --query properties.configuration.ingress.fqdn \
            --output tsv)
          
          # Health check with retry
          for i in {1..10}; do
            if curl -f -s "https://$FQDN" > /dev/null; then
              echo "✅ Application is healthy"
              exit 0
            fi
            echo "⏳ Attempt $i: Application not ready yet, waiting..."
            sleep 10
          done
          
          echo "❌ Application health check failed"
          exit 1

  # Performance Testing
  performance:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [deploy]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get Container App URL
        id: get-url
        run: |
          FQDN=$(az containerapp show \
            --name ${{ env.AZURE_CONTAINER_APP }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --query properties.configuration.ingress.fqdn \
            --output tsv)
          echo "app-url=https://$FQDN" >> $GITHUB_OUTPUT

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            ${{ steps.get-url.outputs.app-url }}
            ${{ steps.get-url.outputs.app-url }}/about
            ${{ steps.get-url.outputs.app-url }}/blog
            ${{ steps.get-url.outputs.app-url }}/services
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Load Testing with Artillery
        run: |
          npm install -g artillery
          
          # Create Artillery config
          cat > artillery-config.yml << EOF
          config:
            target: '${{ steps.get-url.outputs.app-url }}'
            phases:
              - duration: 60
                arrivalRate: 5
                name: "Warm up"
              - duration: 120
                arrivalRate: 10
                name: "Ramp up load"
              - duration: 60
                arrivalRate: 20
                name: "Sustained load"
          scenarios:
            - name: "Browse website"
              weight: 100
              flow:
                - get:
                    url: "/"
                - think: 2
                - get:
                    url: "/about"
                - think: 2
                - get:
                    url: "/blog"
                - think: 2
                - get:
                    url: "/services"
          EOF
          
          # Run load test
          artillery run artillery-config.yml --output report.json
          artillery report report.json

  # Security Post-Deployment
  security-scan:
    name: Security Scan (Deployed App)
    runs-on: ubuntu-latest
    needs: [deploy]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get Container App URL
        id: get-url
        run: |
          FQDN=$(az containerapp show \
            --name ${{ env.AZURE_CONTAINER_APP }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --query properties.configuration.ingress.fqdn \
            --output tsv)
          echo "app-url=https://$FQDN" >> $GITHUB_OUTPUT

      - name: Run OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.7.0
        with:
          target: ${{ steps.get-url.outputs.app-url }}

      - name: SSL Labs Test
        run: |
          # Wait for SSL to be fully configured
          sleep 60
          
          # Check SSL configuration
          DOMAIN=$(echo "${{ steps.get-url.outputs.app-url }}" | sed 's|https://||')
          
          curl -s "https://api.ssllabs.com/api/v3/analyze?host=$DOMAIN&publish=off&all=done" | \
          jq '.endpoints[0].grade' | \
          grep -E '"A\+"|"A"' || (echo "SSL grade not acceptable" && exit 1)

  # Notification
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy, performance, security-scan]
    if: always() && github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Notify Success
        if: needs.deploy.result == 'success' && needs.performance.result == 'success' && needs.security-scan.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: |
            🚀 Deployment successful!
            • Application: stratocraft.dev
            • Environment: Production
            • Performance: ✅ Lighthouse scores achieved
            • Security: ✅ All scans passed
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Failure
        if: needs.deploy.result == 'failure' || needs.performance.result == 'failure' || needs.security-scan.result == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            ❌ Deployment failed!
            • Deploy: ${{ needs.deploy.result }}
            • Performance: ${{ needs.performance.result }}
            • Security: ${{ needs.security-scan.result }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}